# demo_execution_engine.py
"""
Script de demostraci√≥n del ExecutionEngine integrado con todos los m√≥dulos del sistema.
Muestra el flujo completo desde la detecci√≥n de oportunidades hasta la ejecuci√≥n de trades.
"""

import logging
import time
from typing import Dict, List, Any

from utils.logger import configure_logging
from core.dmarket_connector import DMarketAPI
from core.market_analyzer import MarketAnalyzer
from core.strategy_engine import StrategyEngine
from core.alerter import Alerter
from core.inventory_manager import InventoryManager
from core.execution_engine import ExecutionEngine, ExecutionMode

def create_mock_opportunities() -> Dict[str, List[Dict[str, Any]]]:
    """Crea oportunidades simuladas para la demostraci√≥n."""
    return {
        "basic_flips": [
            {
                "strategy": "basic_flip",
                "item_title": "AK-47 | Redline (Field-Tested)",
                "buy_price_usd": 4.50,
                "sell_price_usd": 5.25,
                "profit_usd": 0.75,
                "profit_percentage": 0.167,
                "lso_details": {"assetId": "demo_asset_001"},
                "hbo_details": {"offerId": "demo_order_001"},
                "commission_usd": 0.15,
                "timestamp": time.time()
            }
        ],
        "snipes": [
            {
                "strategy": "snipe",
                "item_title": "M4A4 | Howl (Minimal Wear)",
                "pme_usd": 45.00,
                "offer_price_usd": 3.20,  # Precio muy bajo para auto-ejecuci√≥n
                "discount_percentage": 0.93,
                "potential_profit_usd": 40.50,
                "offer_details": {"assetId": "demo_asset_002"},
                "commission_on_pme_usd": 2.25,
                "timestamp": time.time()
            }
        ],
        "attribute_flips": [
            {
                "strategy": "attribute_premium_flip",
                "item_title": "AWP | Dragon Lore (Battle-Scarred)",
                "asset_id": "demo_asset_003",
                "buy_price_usd": 15.75,
                "estimated_sell_price_usd": 22.00,
                "potential_profit_usd": 5.15,
                "profit_percentage": 0.327,
                "rarity_score": 85.0,
                "premium_multiplier": 1.4,
                "confidence": "high"
            }
        ],
        "trade_lock_arbitrage": [],
        "volatility_trading": []
    }

def demo_execution_engine():
    """Demostraci√≥n principal del ExecutionEngine."""
    
    logger = logging.getLogger(__name__)
    logger.info("üöÄ INICIANDO DEMOSTRACI√ìN DEL EXECUTION ENGINE üöÄ")
    
    # ========================================================================================
    # 1. INICIALIZACI√ìN DE COMPONENTES
    # ========================================================================================
    logger.info("\n" + "="*80)
    logger.info("FASE 1: INICIALIZANDO COMPONENTES DEL SISTEMA")
    logger.info("="*80)
    
    # Crear componentes mock/simulados
    mock_connector = DMarketAPI()  # Se inicializar√° en modo mock si no hay credenciales
    market_analyzer = MarketAnalyzer()
    alerter = Alerter()
    inventory_manager = InventoryManager()
    
    logger.info("‚úÖ Componentes b√°sicos inicializados")
    
    # Configurar ExecutionEngine en modo PAPER_TRADING
    execution_config = {
        "execution_mode": ExecutionMode.PAPER_TRADING.value,
        "max_daily_spending_usd": 50.0,
        "max_single_trade_usd": 10.0,
        "max_concurrent_orders": 5,
        "require_manual_confirmation": True,
        "auto_confirm_below_usd": 5.0,
        "enabled_strategies": {
            "basic_flip": True,
            "snipe": True,
            "attribute_premium_flip": False,  # Deshabilitada para demo
            "trade_lock_arbitrage": False,
            "volatility_trading": False
        }
    }
    
    execution_engine = ExecutionEngine(
        mock_connector,
        inventory_manager,
        alerter,
        execution_config
    )
    
    logger.info("‚úÖ ExecutionEngine inicializado en modo PAPER_TRADING")
    logger.info(f"   - L√≠mite diario: ${execution_config['max_daily_spending_usd']}")
    logger.info(f"   - L√≠mite por trade: ${execution_config['max_single_trade_usd']}")
    logger.info(f"   - Auto-confirmaci√≥n hasta: ${execution_config['auto_confirm_below_usd']}")
    
    # ========================================================================================
    # 2. SIMULACI√ìN DE DETECCI√ìN DE OPORTUNIDADES
    # ========================================================================================
    logger.info("\n" + "="*80)
    logger.info("FASE 2: DETECCI√ìN DE OPORTUNIDADES DE TRADING")
    logger.info("="*80)
    
    # Simular oportunidades encontradas por el strategy engine
    opportunities = create_mock_opportunities()
    
    total_opportunities = sum(len(opps) for opps in opportunities.values())
    logger.info(f"üéØ Encontradas {total_opportunities} oportunidades de trading:")
    
    for strategy, opps in opportunities.items():
        if opps:
            logger.info(f"   - {strategy}: {len(opps)} oportunidades")
            for opp in opps:
                profit = opp.get('profit_usd', opp.get('potential_profit_usd', 0))
                price = opp.get('buy_price_usd', opp.get('offer_price_usd', 0))
                logger.info(f"     * {opp['item_title']}: ${price:.2f} ‚Üí Profit: ${profit:.2f}")
    
    # ========================================================================================
    # 3. PROCESAMIENTO DE OPORTUNIDADES
    # ========================================================================================
    logger.info("\n" + "="*80)
    logger.info("FASE 3: PROCESAMIENTO Y EVALUACI√ìN DE RIESGOS")
    logger.info("="*80)
    
    # Procesar oportunidades con el execution engine
    processing_result = execution_engine.process_opportunities(opportunities)
    
    logger.info("üìä RESULTADOS DEL PROCESAMIENTO:")
    logger.info(f"   - Oportunidades procesadas: {processing_result['total_opportunities']}")
    logger.info(f"   - √ìrdenes creadas: {processing_result['orders_created']}")
    logger.info(f"   - √ìrdenes ejecutadas autom√°ticamente: {processing_result['orders_executed']}")
    logger.info(f"   - √ìrdenes activas pendientes: {processing_result['active_orders']}")
    
    if processing_result['errors']:
        logger.warning(f"   - Errores encontrados: {len(processing_result['errors'])}")
        for error in processing_result['errors']:
            logger.warning(f"     * {error}")
    
    # ========================================================================================
    # 4. REVISI√ìN DE √ìRDENES ACTIVAS
    # ========================================================================================
    logger.info("\n" + "="*80)
    logger.info("FASE 4: GESTI√ìN DE √ìRDENES ACTIVAS")
    logger.info("="*80)
    
    # Mostrar √≥rdenes activas
    active_orders = execution_engine.active_orders
    if active_orders:
        logger.info(f"üìã √ìRDENES ACTIVAS ({len(active_orders)}):")
        for order in active_orders:
            logger.info(f"   - Order ID: {order.id}")
            logger.info(f"     * √çtem: {order.item_title}")
            logger.info(f"     * Estrategia: {order.strategy}")
            logger.info(f"     * Precio: ${order.price_usd:.2f}")
            logger.info(f"     * Estado: {order.status.value}")
            logger.info(f"     * Nivel de riesgo: {order.risk_level.value}")
            logger.info(f"     * Intentos de ejecuci√≥n: {order.execution_attempts}")
            
            # Simular ejecuci√≥n manual de √≥rdenes pendientes
            if order.status.value == "pending" and order.price_usd <= 10.0:  # Solo √≥rdenes peque√±as
                logger.info(f"   ‚Üí Ejecutando orden {order.id} manualmente...")
                success = execution_engine.execute_order(order)
                if success:
                    logger.info(f"   ‚úÖ Orden {order.id} ejecutada exitosamente")
                else:
                    logger.info(f"   ‚ùå Fallo en ejecuci√≥n de orden {order.id}: {order.error_message}")
    else:
        logger.info("üìã No hay √≥rdenes activas")
    
    # ========================================================================================
    # 5. RESUMEN FINAL Y ESTAD√çSTICAS
    # ========================================================================================
    logger.info("\n" + "="*80)
    logger.info("FASE 5: RESUMEN FINAL Y ESTAD√çSTICAS")
    logger.info("="*80)
    
    # Obtener resumen de ejecuci√≥n
    execution_summary = execution_engine.get_execution_summary()
    
    logger.info("üìà RESUMEN DE EJECUCI√ìN:")
    logger.info(f"   - Modo de ejecuci√≥n: {execution_summary['execution_mode']}")
    logger.info(f"   - √ìrdenes activas: {execution_summary['active_orders']}")
    logger.info(f"   - Gastos del d√≠a: ${execution_summary['daily_spending_usd']:.2f}")
    logger.info(f"   - L√≠mite diario: ${execution_summary['daily_limit_usd']:.2f}")
    logger.info(f"   - Presupuesto restante: ${execution_summary['remaining_budget_usd']:.2f}")
    
    recent_stats = execution_summary['recent_stats']
    logger.info("\nüìä ESTAD√çSTICAS RECIENTES (24h):")
    logger.info(f"   - Total de √≥rdenes: {recent_stats['total_orders_24h']}")
    logger.info(f"   - √ìrdenes completadas: {recent_stats['completed_24h']}")
    logger.info(f"   - √ìrdenes fallidas: {recent_stats['failed_24h']}")
    logger.info(f"   - Tasa de √©xito: {recent_stats['success_rate_24h']:.1f}%")
    logger.info(f"   - Profit total: ${recent_stats['total_profit_24h']:.2f}")
    
    # Resumen del inventario
    logger.info("\nüéí RESUMEN DEL INVENTARIO:")
    try:
        inventory_summary = inventory_manager.get_inventory_summary()
        logger.info(f"   - Total de √≠tems: {inventory_summary['total_items']}")
        logger.info(f"   - Inversi√≥n total: ${inventory_summary['total_invested_usd']:.2f}")
        logger.info(f"   - Profit realizado: ${inventory_summary['total_realized_profit_usd']:.2f}")
        logger.info(f"   - ROI: {inventory_summary['roi_percentage']:.2f}%")
        
        if inventory_summary['items_by_status']:
            logger.info("   - √çtems por estado:")
            for status, count in inventory_summary['items_by_status'].items():
                logger.info(f"     * {status}: {count}")
    except Exception as e:
        logger.warning(f"   - No se pudo obtener resumen del inventario: {e}")
        logger.info("   - Ejecutar 'python -c \"from core.inventory_manager import create_tables; create_tables()\"' para crear las tablas")
    
    # ========================================================================================
    # 6. CONCLUSI√ìN
    # ========================================================================================
    logger.info("\n" + "="*80)
    logger.info("üéâ DEMOSTRACI√ìN COMPLETADA EXITOSAMENTE")
    logger.info("="*80)
    
    logger.info("‚úÖ ExecutionEngine demostrado con √©xito:")
    logger.info("   - Detecci√≥n autom√°tica de oportunidades")
    logger.info("   - Evaluaci√≥n de riesgos y l√≠mites")
    logger.info("   - Creaci√≥n y gesti√≥n de √≥rdenes")
    logger.info("   - Ejecuci√≥n autom√°tica y manual")
    logger.info("   - Integraci√≥n con InventoryManager y Alerter")
    logger.info("   - Tracking completo de estad√≠sticas")
    
    logger.info("\nüöÄ El sistema est√° listo para trading en vivo!")
    logger.info("   (Cambiar execution_mode a 'live_trading' para trading real)")

if __name__ == "__main__":
    # Configurar logging
    configure_logging(log_level=logging.INFO)
    
    try:
        demo_execution_engine()
    except Exception as e:
        logger = logging.getLogger(__name__)
        logger.error(f"Error en la demostraci√≥n: {e}", exc_info=True) 